name: Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black mypy pytest pytest-cov
        # Install backend dependencies
        if [ -f backend/requirements.txt ]; then pip install -r backend/requirements.txt; fi
        # Install scheduler dependencies
        if [ -f scheduler/requirements.txt ]; then pip install -r scheduler/requirements.txt; fi
        # Install notification dependencies
        if [ -f notifications/requirements.txt ]; then pip install -r notifications/requirements.txt; fi

    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Check formatting with black
      run: |
        black --check backend/ scheduler/ notifications/ scripts/ || echo "Code formatting issues found. Run 'black .' to fix."

    - name: Type checking with mypy
      run: |
        mypy backend/ scheduler/ notifications/ --ignore-missing-imports || echo "Type checking issues found"

    - name: Run tests
      run: |
        # Create test environment file
        cp .env.example .env
        # Run tests with coverage
        pytest tests/ -v --cov=backend --cov=scheduler --cov=notifications --cov-report=xml --cov-report=html || echo "Some tests failed"

    - name: Upload coverage reports
      uses: actions/upload-artifact@v3
      with:
        name: coverage-reports-${{ matrix.python-version }}
        path: |
          coverage.xml
          htmlcov/

  docker-build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Verify Docker Compose configuration
      run: |
        docker-compose config

    - name: Build Docker images
      run: |
        docker-compose build --no-cache

    - name: Check Docker images
      run: |
        docker images | grep bionewsbot
