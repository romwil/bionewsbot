name: Continuous Deployment

on:
  push:
    tags:
      - 'v*.*.*'
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to deploy'
        required: true
        type: string

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 0  # Fetch all history for changelog generation

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=sha

    # Build and push Backend image
    - name: Build and push Backend Docker image
      uses: docker/build-push-action@v4
      with:
        context: ./backend
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend:latest
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend:${{ github.ref_name }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    # Build and push Frontend image
    - name: Build and push Frontend Docker image
      uses: docker/build-push-action@v4
      with:
        context: ./frontend
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:latest
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:${{ github.ref_name }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    # Build and push Scheduler image
    - name: Build and push Scheduler Docker image
      uses: docker/build-push-action@v4
      with:
        context: ./scheduler
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/scheduler:latest
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/scheduler:${{ github.ref_name }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    # Build and push Notifications image
    - name: Build and push Notifications Docker image
      uses: docker/build-push-action@v4
      with:
        context: ./notifications
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/notifications:latest
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/notifications:${{ github.ref_name }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  generate-changelog:
    runs-on: ubuntu-latest
    needs: build-and-push
    permissions:
      contents: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Generate changelog
      id: changelog
      uses: TriPSs/conventional-changelog-action@v3
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        output-file: 'CHANGELOG.md'
        skip-version-file: 'true'
        skip-commit: 'false'
        git-message: 'chore(release): update CHANGELOG.md for {version}'

    - name: Create Release Notes
      if: steps.changelog.outputs.skipped == 'false'
      run: |
        cat << EOF > release-notes.md
        ## What's Changed

        ${{ steps.changelog.outputs.clean_changelog }}

        ## Docker Images

        The following Docker images have been published to GitHub Container Registry:

        - \`ghcr.io/${{ env.IMAGE_NAME }}/backend:${{ github.ref_name }}\`
        - \`ghcr.io/${{ env.IMAGE_NAME }}/frontend:${{ github.ref_name }}\`
        - \`ghcr.io/${{ env.IMAGE_NAME }}/scheduler:${{ github.ref_name }}\`
        - \`ghcr.io/${{ env.IMAGE_NAME }}/notifications:${{ github.ref_name }}\`

        ### Pull the images:

        \`\`\`bash
        docker pull ghcr.io/${{ env.IMAGE_NAME }}/backend:${{ github.ref_name }}
        docker pull ghcr.io/${{ env.IMAGE_NAME }}/frontend:${{ github.ref_name }}
        docker pull ghcr.io/${{ env.IMAGE_NAME }}/scheduler:${{ github.ref_name }}
        docker pull ghcr.io/${{ env.IMAGE_NAME }}/notifications:${{ github.ref_name }}
        \`\`\`

        **Full Changelog**: https://github.com/${{ github.repository }}/compare/${{ steps.changelog.outputs.previous_tag }}...${{ github.ref_name }}
        EOF

    - name: Update Release
      if: github.event_name == 'release'
      uses: softprops/action-gh-release@v1
      with:
        body_path: release-notes.md
        token: ${{ secrets.GITHUB_TOKEN }}

  deploy-notification:
    runs-on: ubuntu-latest
    needs: [build-and-push, generate-changelog]

    steps:
    - name: Send deployment notification
      run: |
        echo "Deployment completed for version ${{ github.ref_name }}"
        echo "Images available at:"
        echo "  - ghcr.io/${{ env.IMAGE_NAME }}/backend:${{ github.ref_name }}"
        echo "  - ghcr.io/${{ env.IMAGE_NAME }}/frontend:${{ github.ref_name }}"
        echo "  - ghcr.io/${{ env.IMAGE_NAME }}/scheduler:${{ github.ref_name }}"
        echo "  - ghcr.io/${{ env.IMAGE_NAME }}/notifications:${{ github.ref_name }}"
