name: Security Scanning

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  dependency-scan:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install safety for dependency scanning
      run: |
        pip install safety

    - name: Run safety check on backend dependencies
      run: |
        if [ -f backend/requirements.txt ]; then
          safety check -r backend/requirements.txt --json || echo "Vulnerabilities found in backend dependencies"
        fi

    - name: Run safety check on scheduler dependencies
      run: |
        if [ -f scheduler/requirements.txt ]; then
          safety check -r scheduler/requirements.txt --json || echo "Vulnerabilities found in scheduler dependencies"
        fi

    - name: Run safety check on notifications dependencies
      run: |
        if [ -f notifications/requirements.txt ]; then
          safety check -r notifications/requirements.txt --json || echo "Vulnerabilities found in notifications dependencies"
        fi

    - name: Run pip-audit for additional vulnerability scanning
      run: |
        pip install pip-audit
        pip-audit || echo "Vulnerabilities found by pip-audit"

  secret-scan:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0  # Fetch all history for proper secret scanning

    - name: TruffleHog OSS Secret Scanning
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: ${{ github.event.repository.default_branch }}
        head: HEAD
        extra_args: --debug --only-verified

    - name: Gitleaks Secret Scanning
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  sast:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install Bandit for Python SAST
      run: |
        pip install bandit[toml]

    - name: Run Bandit security scan
      run: |
        bandit -r backend/ scheduler/ notifications/ -f json -o bandit-report.json || echo "Security issues found by Bandit"

    - name: Upload Bandit results
      uses: actions/upload-artifact@v3
      with:
        name: bandit-security-report
        path: bandit-report.json

    - name: Run Semgrep SAST
      uses: returntocorp/semgrep-action@v1
      with:
        config: >
          p/security-audit
          p/python
          p/docker
          p/secrets

    - name: CodeQL Analysis
      uses: github/codeql-action/analyze@v2
      with:
        languages: python

  docker-security:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Run Trivy vulnerability scanner on Dockerfiles
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'config'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Run Hadolint on Dockerfiles
      run: |
        docker run --rm -i hadolint/hadolint < backend/Dockerfile || echo "Dockerfile linting issues found"
        docker run --rm -i hadolint/hadolint < frontend/Dockerfile || echo "Frontend Dockerfile linting issues found"
        docker run --rm -i hadolint/hadolint < scheduler/Dockerfile || echo "Scheduler Dockerfile linting issues found"
        docker run --rm -i hadolint/hadolint < notifications/Dockerfile || echo "Notifications Dockerfile linting issues found"
