version: '3.9'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: bionewsbot-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-bionewsbot}
      POSTGRES_USER: ${POSTGRES_USER:-bionewsbot}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-changeme}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    networks:
      - bionewsbot-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-bionewsbot} -d ${POSTGRES_DB:-bionewsbot}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: bionewsbot-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-changeme}
    volumes:
      - redis_data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    ports:
      - "${REDIS_PORT:-6379}:6379"
    networks:
      - bionewsbot-network
    healthcheck:
      test: ["CMD", "redis-cli", "--auth", "${REDIS_PASSWORD:-changeme}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Backend API (FastAPI)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      args:
        - PYTHON_VERSION=${PYTHON_VERSION:-3.11}
    container_name: bionewsbot-backend
    restart: unless-stopped
    environment:
      # Database
      DATABASE_URL: postgresql://${POSTGRES_USER:-bionewsbot}:${POSTGRES_PASSWORD:-changeme}@postgres:5432/${POSTGRES_DB:-bionewsbot}
      # Redis
      REDIS_URL: redis://:${REDIS_PASSWORD:-changeme}@redis:6379/0
      # API Settings
      API_KEY: ${API_KEY:-your-api-key-here}
      SECRET_KEY: ${SECRET_KEY:-your-secret-key-here}
      ENVIRONMENT: ${ENVIRONMENT:-production}
      DEBUG: ${DEBUG:-false}
      # CORS
      CORS_ORIGINS: ${CORS_ORIGINS:-http://localhost:3000}
      # External APIs
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      PUBMED_API_KEY: ${PUBMED_API_KEY}
      NEWS_API_KEY: ${NEWS_API_KEY}
    volumes:
      - ./backend/app:/app
      - backend_logs:/app/logs
    ports:
      - "${BACKEND_PORT:-8000}:8000"
    networks:
      - bionewsbot-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Scheduler/Worker Service
  scheduler:
    build:
      context: ./scheduler
      dockerfile: Dockerfile
      args:
        - PYTHON_VERSION=${PYTHON_VERSION:-3.11}
    container_name: bionewsbot-scheduler
    restart: unless-stopped
    environment:
      # Database
      DATABASE_URL: postgresql://${POSTGRES_USER:-bionewsbot}:${POSTGRES_PASSWORD:-changeme}@postgres:5432/${POSTGRES_DB:-bionewsbot}
      # Redis
      REDIS_URL: redis://:${REDIS_PASSWORD:-changeme}@redis:6379/0
      # Worker Settings
      WORKER_CONCURRENCY: ${WORKER_CONCURRENCY:-4}
      SCHEDULE_INTERVAL: ${SCHEDULE_INTERVAL:-300}
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      # API Connection
      BACKEND_URL: http://backend:8000
      API_KEY: ${API_KEY:-your-api-key-here}
    volumes:
      - ./scheduler/app:/app
      - scheduler_logs:/app/logs
    networks:
      - bionewsbot-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8080/health').raise_for_status()"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Notification Service
  notifications:
    build:
      context: ./notifications
      dockerfile: Dockerfile
    container_name: bionewsbot-notifications
    restart: unless-stopped
    environment:
      # Database
      DATABASE_URL: postgresql://${POSTGRES_USER:-bionewsbot}:${POSTGRES_PASSWORD:-changeme}@postgres:5432/${POSTGRES_DB:-bionewsbot}
      # Redis
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-changeme}
      # Slack Configuration
      SLACK_BOT_TOKEN: ${SLACK_BOT_TOKEN}
      SLACK_SIGNING_SECRET: ${SLACK_SIGNING_SECRET}
      SLACK_APP_TOKEN: ${SLACK_APP_TOKEN}
      # Service Settings
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      RATE_LIMIT_ENABLED: ${RATE_LIMIT_ENABLED:-true}
      # API Connection
      BACKEND_URL: http://backend:8000
      API_KEY: ${API_KEY:-your-api-key-here}
    volumes:
      - ./notifications/logs:/app/logs
      - notification_data:/app/data
    ports:
      - "${NOTIFICATIONS_PORT:-8001}:8001"
    networks:
      - bionewsbot-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/webhooks/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend (Next.js)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - NODE_VERSION=${NODE_VERSION:-20}
    container_name: bionewsbot-frontend
    restart: unless-stopped
    environment:
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-http://localhost:8000}
      NODE_ENV: ${NODE_ENV:-production}
    volumes:
      - ./frontend/public:/app/public:ro
      - frontend_cache:/app/.next/cache
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    networks:
      - bionewsbot-network
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Nginx Reverse Proxy (Production)
  nginx:
    image: nginx:alpine
    container_name: bionewsbot-nginx
    restart: unless-stopped
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - nginx_logs:/var/log/nginx
    ports:
      - "${NGINX_HTTP_PORT:-80}:80"
      - "${NGINX_HTTPS_PORT:-443}:443"
    networks:
      - bionewsbot-network
    depends_on:
      - frontend
      - backend
      - notifications
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Prometheus Monitoring (Optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: bionewsbot-prometheus
    restart: unless-stopped
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    networks:
      - bionewsbot-network
    profiles:
      - monitoring

  # Grafana Visualization (Optional)
  grafana:
    image: grafana/grafana:latest
    container_name: bionewsbot-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    ports:
      - "${GRAFANA_PORT:-3001}:3000"
    networks:
      - bionewsbot-network
    depends_on:
      - prometheus
    profiles:
      - monitoring

networks:
  bionewsbot-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  backend_logs:
    driver: local
  scheduler_logs:
    driver: local
  notification_data:
    driver: local
  frontend_cache:
    driver: local
  nginx_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
